 `React.memo` with a **child component** to prevent unnecessary re-renders. We'll also use `useCallback` in the parent to pass a memoized function to the child.

---

### âœ… Example: Parent + Memoized Child with `React.memo`

```jsx
import React, { useState, useCallback } from 'react';

// ðŸ§’ Child component that only re-renders when props change
const Child = React.memo(({ onClick }) => {
  console.log("ðŸ‘¶ Child rendered");
  return (
    <div>
      <h3>Child Component</h3>
      <button onClick={onClick}>Call Parent Function</button>
    </div>
  );
});

function Parent() {
  const [count, setCount] = useState(0);
  const [clicks, setClicks] = useState(0);

  // âœ… Memoized callback so Child doesn't re-render unless needed
  const handleChildClick = useCallback(() => {
    setClicks(prev => prev + 1);
  }, []);

  return (
    <div>
      <h2>React.memo + useCallback Example</h2>
      <p>Parent Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Re-render Parent</button>

      <p>Child Clicks: {clicks}</p>

      {/* ðŸ§’ Passing memoized function to memoized child */}
      <Child onClick={handleChildClick} />
    </div>
  );
}

export default Parent;
```

---

### ðŸ§  Whatâ€™s Happening

* `Child` is wrapped in `React.memo`, so it **only re-renders when props change**.
* `onClick` function is memoized using `useCallback`, so it doesnâ€™t change on every parent re-render.
* Clicking "Re-render Parent" **wonâ€™t re-render the child**.
* Clicking "Call Parent Function" triggers state change in parent via the child's memoized callback.

---

### ðŸ§ª Console Output Example

```
ðŸ‘¶ Child rendered   // Only once!
```

Unless you change the `onClick` prop (which you wonâ€™t, because of `useCallback`), the child doesn't re-render.

---

Let me know if you'd like to see:

* A list rendering example using `React.memo`
* Comparison with and without `useCallback`
* Optimized component performance patterns
